// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace SmartGrowHub.WebApi.Infrastructure.Data.CompiledModels
{
    public partial class ApplicationContextModel
    {
        partial void Initialize()
        {
            var componentDb = ComponentDbEntityType.Create(this);
            var growHubDb = GrowHubDbEntityType.Create(this);
            var plantDb = PlantDbEntityType.Create(this);
            var sensorReadingDb = SensorReadingDbEntityType.Create(this);
            var settingDb = SettingDbEntityType.Create(this);
            var userDb = UserDbEntityType.Create(this);
            var userSessionDb = UserSessionDbEntityType.Create(this);

            ComponentDbEntityType.CreateForeignKey1(componentDb, settingDb);
            GrowHubDbEntityType.CreateForeignKey1(growHubDb, plantDb);
            GrowHubDbEntityType.CreateForeignKey2(growHubDb, userDb);
            SensorReadingDbEntityType.CreateForeignKey1(sensorReadingDb, growHubDb);
            SettingDbEntityType.CreateForeignKey1(settingDb, growHubDb);
            UserSessionDbEntityType.CreateForeignKey1(userSessionDb, userDb);

            ComponentDbEntityType.CreateAnnotations(componentDb);
            GrowHubDbEntityType.CreateAnnotations(growHubDb);
            PlantDbEntityType.CreateAnnotations(plantDb);
            SensorReadingDbEntityType.CreateAnnotations(sensorReadingDb);
            SettingDbEntityType.CreateAnnotations(settingDb);
            UserDbEntityType.CreateAnnotations(userDb);
            UserSessionDbEntityType.CreateAnnotations(userSessionDb);

            AddAnnotation("ProductVersion", "8.0.10");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var componentDb = FindEntityType("SmartGrowHub.WebApi.Infrastructure.Data.Model.ComponentDb")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            componentDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase = new TableBase("SmartGrowHub.WebApi.Infrastructure.Data.Model.ComponentDb", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "BLOB", smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase.Columns.Add("Id", idColumnBase);
            var settingDbIdColumnBase = new ColumnBase<ColumnMappingBase>("SettingDbId", "BLOB", smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase.Columns.Add("SettingDbId", settingDbIdColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "INTEGER", smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase.Columns.Add("Type", typeColumnBase);
            var unitColumnBase = new ColumnBase<ColumnMappingBase>("Unit", "TEXT", smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase.Columns.Add("Unit", unitColumnBase);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "INTEGER", smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("SmartGrowHub.WebApi.Infrastructure.Data.Model.ComponentDb", smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase);
            var smartGrowHubWebApiInfrastructureDataModelComponentDbMappingBase = new TableMappingBase<ColumnMappingBase>(componentDb, smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase, true);
            smartGrowHubWebApiInfrastructureDataModelComponentDbTableBase.AddTypeMapping(smartGrowHubWebApiInfrastructureDataModelComponentDbMappingBase, false);
            defaultTableMappings.Add(smartGrowHubWebApiInfrastructureDataModelComponentDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, componentDb.FindProperty("Id")!, smartGrowHubWebApiInfrastructureDataModelComponentDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)settingDbIdColumnBase, componentDb.FindProperty("SettingDbId")!, smartGrowHubWebApiInfrastructureDataModelComponentDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, componentDb.FindProperty("Type")!, smartGrowHubWebApiInfrastructureDataModelComponentDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitColumnBase, componentDb.FindProperty("Unit")!, smartGrowHubWebApiInfrastructureDataModelComponentDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, componentDb.FindProperty("Value")!, smartGrowHubWebApiInfrastructureDataModelComponentDbMappingBase);

            var tableMappings = new List<TableMapping>();
            componentDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var componentsTable = new Table("Components", null, relationalModel);
            var idColumn = new Column("Id", "BLOB", componentsTable);
            componentsTable.Columns.Add("Id", idColumn);
            var settingDbIdColumn = new Column("SettingDbId", "BLOB", componentsTable);
            componentsTable.Columns.Add("SettingDbId", settingDbIdColumn);
            var typeColumn = new Column("Type", "INTEGER", componentsTable);
            componentsTable.Columns.Add("Type", typeColumn);
            var unitColumn = new Column("Unit", "TEXT", componentsTable);
            componentsTable.Columns.Add("Unit", unitColumn);
            var valueColumn = new Column("Value", "INTEGER", componentsTable);
            componentsTable.Columns.Add("Value", valueColumn);
            var pK_Components = new UniqueConstraint("PK_Components", componentsTable, new[] { idColumn });
            componentsTable.PrimaryKey = pK_Components;
            var pK_ComponentsUc = RelationalModel.GetKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.ComponentDb",
                new[] { "Id" });
            pK_Components.MappedKeys.Add(pK_ComponentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ComponentsUc).Add(pK_Components);
            componentsTable.UniqueConstraints.Add("PK_Components", pK_Components);
            var iX_Components_SettingDbId = new TableIndex(
            "IX_Components_SettingDbId", componentsTable, new[] { settingDbIdColumn }, false);
            var iX_Components_SettingDbIdIx = RelationalModel.GetIndex(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.ComponentDb",
                new[] { "SettingDbId" });
            iX_Components_SettingDbId.MappedIndexes.Add(iX_Components_SettingDbIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Components_SettingDbIdIx).Add(iX_Components_SettingDbId);
            componentsTable.Indexes.Add("IX_Components_SettingDbId", iX_Components_SettingDbId);
            relationalModel.Tables.Add(("Components", null), componentsTable);
            var componentsTableMapping = new TableMapping(componentDb, componentsTable, true);
            componentsTable.AddTypeMapping(componentsTableMapping, false);
            tableMappings.Add(componentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, componentDb.FindProperty("Id")!, componentsTableMapping);
            RelationalModel.CreateColumnMapping(settingDbIdColumn, componentDb.FindProperty("SettingDbId")!, componentsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, componentDb.FindProperty("Type")!, componentsTableMapping);
            RelationalModel.CreateColumnMapping(unitColumn, componentDb.FindProperty("Unit")!, componentsTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, componentDb.FindProperty("Value")!, componentsTableMapping);

            var growHubDb = FindEntityType("SmartGrowHub.WebApi.Infrastructure.Data.Model.GrowHubDb")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            growHubDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var smartGrowHubWebApiInfrastructureDataModelGrowHubDbTableBase = new TableBase("SmartGrowHub.WebApi.Infrastructure.Data.Model.GrowHubDb", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "BLOB", smartGrowHubWebApiInfrastructureDataModelGrowHubDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelGrowHubDbTableBase.Columns.Add("Id", idColumnBase0);
            var plantIdColumnBase = new ColumnBase<ColumnMappingBase>("PlantId", "BLOB", smartGrowHubWebApiInfrastructureDataModelGrowHubDbTableBase)
            {
                IsNullable = true
            };
            smartGrowHubWebApiInfrastructureDataModelGrowHubDbTableBase.Columns.Add("PlantId", plantIdColumnBase);
            var userDbIdColumnBase = new ColumnBase<ColumnMappingBase>("UserDbId", "BLOB", smartGrowHubWebApiInfrastructureDataModelGrowHubDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelGrowHubDbTableBase.Columns.Add("UserDbId", userDbIdColumnBase);
            relationalModel.DefaultTables.Add("SmartGrowHub.WebApi.Infrastructure.Data.Model.GrowHubDb", smartGrowHubWebApiInfrastructureDataModelGrowHubDbTableBase);
            var smartGrowHubWebApiInfrastructureDataModelGrowHubDbMappingBase = new TableMappingBase<ColumnMappingBase>(growHubDb, smartGrowHubWebApiInfrastructureDataModelGrowHubDbTableBase, true);
            smartGrowHubWebApiInfrastructureDataModelGrowHubDbTableBase.AddTypeMapping(smartGrowHubWebApiInfrastructureDataModelGrowHubDbMappingBase, false);
            defaultTableMappings0.Add(smartGrowHubWebApiInfrastructureDataModelGrowHubDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, growHubDb.FindProperty("Id")!, smartGrowHubWebApiInfrastructureDataModelGrowHubDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)plantIdColumnBase, growHubDb.FindProperty("PlantId")!, smartGrowHubWebApiInfrastructureDataModelGrowHubDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userDbIdColumnBase, growHubDb.FindProperty("UserDbId")!, smartGrowHubWebApiInfrastructureDataModelGrowHubDbMappingBase);

            var tableMappings0 = new List<TableMapping>();
            growHubDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var growHubsTable = new Table("GrowHubs", null, relationalModel);
            var idColumn0 = new Column("Id", "BLOB", growHubsTable);
            growHubsTable.Columns.Add("Id", idColumn0);
            var plantIdColumn = new Column("PlantId", "BLOB", growHubsTable)
            {
                IsNullable = true
            };
            growHubsTable.Columns.Add("PlantId", plantIdColumn);
            var userDbIdColumn = new Column("UserDbId", "BLOB", growHubsTable);
            growHubsTable.Columns.Add("UserDbId", userDbIdColumn);
            var pK_GrowHubs = new UniqueConstraint("PK_GrowHubs", growHubsTable, new[] { idColumn0 });
            growHubsTable.PrimaryKey = pK_GrowHubs;
            var pK_GrowHubsUc = RelationalModel.GetKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.GrowHubDb",
                new[] { "Id" });
            pK_GrowHubs.MappedKeys.Add(pK_GrowHubsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GrowHubsUc).Add(pK_GrowHubs);
            growHubsTable.UniqueConstraints.Add("PK_GrowHubs", pK_GrowHubs);
            var iX_GrowHubs_PlantId = new TableIndex(
            "IX_GrowHubs_PlantId", growHubsTable, new[] { plantIdColumn }, false);
            var iX_GrowHubs_PlantIdIx = RelationalModel.GetIndex(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.GrowHubDb",
                new[] { "PlantId" });
            iX_GrowHubs_PlantId.MappedIndexes.Add(iX_GrowHubs_PlantIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GrowHubs_PlantIdIx).Add(iX_GrowHubs_PlantId);
            growHubsTable.Indexes.Add("IX_GrowHubs_PlantId", iX_GrowHubs_PlantId);
            var iX_GrowHubs_UserDbId = new TableIndex(
            "IX_GrowHubs_UserDbId", growHubsTable, new[] { userDbIdColumn }, false);
            var iX_GrowHubs_UserDbIdIx = RelationalModel.GetIndex(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.GrowHubDb",
                new[] { "UserDbId" });
            iX_GrowHubs_UserDbId.MappedIndexes.Add(iX_GrowHubs_UserDbIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GrowHubs_UserDbIdIx).Add(iX_GrowHubs_UserDbId);
            growHubsTable.Indexes.Add("IX_GrowHubs_UserDbId", iX_GrowHubs_UserDbId);
            relationalModel.Tables.Add(("GrowHubs", null), growHubsTable);
            var growHubsTableMapping = new TableMapping(growHubDb, growHubsTable, true);
            growHubsTable.AddTypeMapping(growHubsTableMapping, false);
            tableMappings0.Add(growHubsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, growHubDb.FindProperty("Id")!, growHubsTableMapping);
            RelationalModel.CreateColumnMapping(plantIdColumn, growHubDb.FindProperty("PlantId")!, growHubsTableMapping);
            RelationalModel.CreateColumnMapping(userDbIdColumn, growHubDb.FindProperty("UserDbId")!, growHubsTableMapping);

            var plantDb = FindEntityType("SmartGrowHub.WebApi.Infrastructure.Data.Model.PlantDb")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            plantDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var smartGrowHubWebApiInfrastructureDataModelPlantDbTableBase = new TableBase("SmartGrowHub.WebApi.Infrastructure.Data.Model.PlantDb", null, relationalModel);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "BLOB", smartGrowHubWebApiInfrastructureDataModelPlantDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelPlantDbTableBase.Columns.Add("Id", idColumnBase1);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", smartGrowHubWebApiInfrastructureDataModelPlantDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelPlantDbTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("SmartGrowHub.WebApi.Infrastructure.Data.Model.PlantDb", smartGrowHubWebApiInfrastructureDataModelPlantDbTableBase);
            var smartGrowHubWebApiInfrastructureDataModelPlantDbMappingBase = new TableMappingBase<ColumnMappingBase>(plantDb, smartGrowHubWebApiInfrastructureDataModelPlantDbTableBase, true);
            smartGrowHubWebApiInfrastructureDataModelPlantDbTableBase.AddTypeMapping(smartGrowHubWebApiInfrastructureDataModelPlantDbMappingBase, false);
            defaultTableMappings1.Add(smartGrowHubWebApiInfrastructureDataModelPlantDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, plantDb.FindProperty("Id")!, smartGrowHubWebApiInfrastructureDataModelPlantDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, plantDb.FindProperty("Name")!, smartGrowHubWebApiInfrastructureDataModelPlantDbMappingBase);

            var tableMappings1 = new List<TableMapping>();
            plantDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var plantsTable = new Table("Plants", null, relationalModel);
            var idColumn1 = new Column("Id", "BLOB", plantsTable);
            plantsTable.Columns.Add("Id", idColumn1);
            var nameColumn = new Column("Name", "TEXT", plantsTable);
            plantsTable.Columns.Add("Name", nameColumn);
            var pK_Plants = new UniqueConstraint("PK_Plants", plantsTable, new[] { idColumn1 });
            plantsTable.PrimaryKey = pK_Plants;
            var pK_PlantsUc = RelationalModel.GetKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.PlantDb",
                new[] { "Id" });
            pK_Plants.MappedKeys.Add(pK_PlantsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PlantsUc).Add(pK_Plants);
            plantsTable.UniqueConstraints.Add("PK_Plants", pK_Plants);
            relationalModel.Tables.Add(("Plants", null), plantsTable);
            var plantsTableMapping = new TableMapping(plantDb, plantsTable, true);
            plantsTable.AddTypeMapping(plantsTableMapping, false);
            tableMappings1.Add(plantsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, plantDb.FindProperty("Id")!, plantsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, plantDb.FindProperty("Name")!, plantsTableMapping);

            var sensorReadingDb = FindEntityType("SmartGrowHub.WebApi.Infrastructure.Data.Model.SensorReadingDb")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            sensorReadingDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase = new TableBase("SmartGrowHub.WebApi.Infrastructure.Data.Model.SensorReadingDb", null, relationalModel);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "TEXT", smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var growHubDbIdColumnBase = new ColumnBase<ColumnMappingBase>("GrowHubDbId", "BLOB", smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("GrowHubDbId", growHubDbIdColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "BLOB", smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("Id", idColumnBase2);
            var typeColumnBase0 = new ColumnBase<ColumnMappingBase>("Type", "INTEGER", smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("Type", typeColumnBase0);
            var unitColumnBase0 = new ColumnBase<ColumnMappingBase>("Unit", "TEXT", smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("Unit", unitColumnBase0);
            var valueColumnBase0 = new ColumnBase<ColumnMappingBase>("Value", "TEXT", smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase.Columns.Add("Value", valueColumnBase0);
            relationalModel.DefaultTables.Add("SmartGrowHub.WebApi.Infrastructure.Data.Model.SensorReadingDb", smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase);
            var smartGrowHubWebApiInfrastructureDataModelSensorReadingDbMappingBase = new TableMappingBase<ColumnMappingBase>(sensorReadingDb, smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase, true);
            smartGrowHubWebApiInfrastructureDataModelSensorReadingDbTableBase.AddTypeMapping(smartGrowHubWebApiInfrastructureDataModelSensorReadingDbMappingBase, false);
            defaultTableMappings2.Add(smartGrowHubWebApiInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, sensorReadingDb.FindProperty("Id")!, smartGrowHubWebApiInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, sensorReadingDb.FindProperty("CreatedAt")!, smartGrowHubWebApiInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)growHubDbIdColumnBase, sensorReadingDb.FindProperty("GrowHubDbId")!, smartGrowHubWebApiInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase0, sensorReadingDb.FindProperty("Type")!, smartGrowHubWebApiInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitColumnBase0, sensorReadingDb.FindProperty("Unit")!, smartGrowHubWebApiInfrastructureDataModelSensorReadingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase0, sensorReadingDb.FindProperty("Value")!, smartGrowHubWebApiInfrastructureDataModelSensorReadingDbMappingBase);

            var tableMappings2 = new List<TableMapping>();
            sensorReadingDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var sensorReadingTable = new Table("SensorReading", null, relationalModel);
            var idColumn2 = new Column("Id", "BLOB", sensorReadingTable);
            sensorReadingTable.Columns.Add("Id", idColumn2);
            var createdAtColumn = new Column("CreatedAt", "TEXT", sensorReadingTable);
            sensorReadingTable.Columns.Add("CreatedAt", createdAtColumn);
            var growHubDbIdColumn = new Column("GrowHubDbId", "BLOB", sensorReadingTable);
            sensorReadingTable.Columns.Add("GrowHubDbId", growHubDbIdColumn);
            var typeColumn0 = new Column("Type", "INTEGER", sensorReadingTable);
            sensorReadingTable.Columns.Add("Type", typeColumn0);
            var unitColumn0 = new Column("Unit", "TEXT", sensorReadingTable);
            sensorReadingTable.Columns.Add("Unit", unitColumn0);
            var valueColumn0 = new Column("Value", "TEXT", sensorReadingTable);
            sensorReadingTable.Columns.Add("Value", valueColumn0);
            var pK_SensorReading = new UniqueConstraint("PK_SensorReading", sensorReadingTable, new[] { idColumn2 });
            sensorReadingTable.PrimaryKey = pK_SensorReading;
            var pK_SensorReadingUc = RelationalModel.GetKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.SensorReadingDb",
                new[] { "Id" });
            pK_SensorReading.MappedKeys.Add(pK_SensorReadingUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SensorReadingUc).Add(pK_SensorReading);
            sensorReadingTable.UniqueConstraints.Add("PK_SensorReading", pK_SensorReading);
            var iX_SensorReading_GrowHubDbId = new TableIndex(
            "IX_SensorReading_GrowHubDbId", sensorReadingTable, new[] { growHubDbIdColumn }, false);
            var iX_SensorReading_GrowHubDbIdIx = RelationalModel.GetIndex(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.SensorReadingDb",
                new[] { "GrowHubDbId" });
            iX_SensorReading_GrowHubDbId.MappedIndexes.Add(iX_SensorReading_GrowHubDbIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_SensorReading_GrowHubDbIdIx).Add(iX_SensorReading_GrowHubDbId);
            sensorReadingTable.Indexes.Add("IX_SensorReading_GrowHubDbId", iX_SensorReading_GrowHubDbId);
            relationalModel.Tables.Add(("SensorReading", null), sensorReadingTable);
            var sensorReadingTableMapping = new TableMapping(sensorReadingDb, sensorReadingTable, true);
            sensorReadingTable.AddTypeMapping(sensorReadingTableMapping, false);
            tableMappings2.Add(sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, sensorReadingDb.FindProperty("Id")!, sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, sensorReadingDb.FindProperty("CreatedAt")!, sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(growHubDbIdColumn, sensorReadingDb.FindProperty("GrowHubDbId")!, sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn0, sensorReadingDb.FindProperty("Type")!, sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(unitColumn0, sensorReadingDb.FindProperty("Unit")!, sensorReadingTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn0, sensorReadingDb.FindProperty("Value")!, sensorReadingTableMapping);

            var settingDb = FindEntityType("SmartGrowHub.WebApi.Infrastructure.Data.Model.SettingDb")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            settingDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase = new TableBase("SmartGrowHub.WebApi.Infrastructure.Data.Model.SettingDb", null, relationalModel);
            var growHubDbIdColumnBase0 = new ColumnBase<ColumnMappingBase>("GrowHubDbId", "BLOB", smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase.Columns.Add("GrowHubDbId", growHubDbIdColumnBase0);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "BLOB", smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase.Columns.Add("Id", idColumnBase3);
            var modeColumnBase = new ColumnBase<ColumnMappingBase>("Mode", "INTEGER", smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase.Columns.Add("Mode", modeColumnBase);
            var typeColumnBase1 = new ColumnBase<ColumnMappingBase>("Type", "INTEGER", smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase.Columns.Add("Type", typeColumnBase1);
            relationalModel.DefaultTables.Add("SmartGrowHub.WebApi.Infrastructure.Data.Model.SettingDb", smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase);
            var smartGrowHubWebApiInfrastructureDataModelSettingDbMappingBase = new TableMappingBase<ColumnMappingBase>(settingDb, smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase, true);
            smartGrowHubWebApiInfrastructureDataModelSettingDbTableBase.AddTypeMapping(smartGrowHubWebApiInfrastructureDataModelSettingDbMappingBase, false);
            defaultTableMappings3.Add(smartGrowHubWebApiInfrastructureDataModelSettingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, settingDb.FindProperty("Id")!, smartGrowHubWebApiInfrastructureDataModelSettingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)growHubDbIdColumnBase0, settingDb.FindProperty("GrowHubDbId")!, smartGrowHubWebApiInfrastructureDataModelSettingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modeColumnBase, settingDb.FindProperty("Mode")!, smartGrowHubWebApiInfrastructureDataModelSettingDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase1, settingDb.FindProperty("Type")!, smartGrowHubWebApiInfrastructureDataModelSettingDbMappingBase);

            var tableMappings3 = new List<TableMapping>();
            settingDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var settingsTable = new Table("Settings", null, relationalModel);
            var idColumn3 = new Column("Id", "BLOB", settingsTable);
            settingsTable.Columns.Add("Id", idColumn3);
            var growHubDbIdColumn0 = new Column("GrowHubDbId", "BLOB", settingsTable);
            settingsTable.Columns.Add("GrowHubDbId", growHubDbIdColumn0);
            var modeColumn = new Column("Mode", "INTEGER", settingsTable);
            settingsTable.Columns.Add("Mode", modeColumn);
            var typeColumn1 = new Column("Type", "INTEGER", settingsTable);
            settingsTable.Columns.Add("Type", typeColumn1);
            var pK_Settings = new UniqueConstraint("PK_Settings", settingsTable, new[] { idColumn3 });
            settingsTable.PrimaryKey = pK_Settings;
            var pK_SettingsUc = RelationalModel.GetKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.SettingDb",
                new[] { "Id" });
            pK_Settings.MappedKeys.Add(pK_SettingsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SettingsUc).Add(pK_Settings);
            settingsTable.UniqueConstraints.Add("PK_Settings", pK_Settings);
            var iX_Settings_GrowHubDbId = new TableIndex(
            "IX_Settings_GrowHubDbId", settingsTable, new[] { growHubDbIdColumn0 }, false);
            var iX_Settings_GrowHubDbIdIx = RelationalModel.GetIndex(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.SettingDb",
                new[] { "GrowHubDbId" });
            iX_Settings_GrowHubDbId.MappedIndexes.Add(iX_Settings_GrowHubDbIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Settings_GrowHubDbIdIx).Add(iX_Settings_GrowHubDbId);
            settingsTable.Indexes.Add("IX_Settings_GrowHubDbId", iX_Settings_GrowHubDbId);
            relationalModel.Tables.Add(("Settings", null), settingsTable);
            var settingsTableMapping = new TableMapping(settingDb, settingsTable, true);
            settingsTable.AddTypeMapping(settingsTableMapping, false);
            tableMappings3.Add(settingsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, settingDb.FindProperty("Id")!, settingsTableMapping);
            RelationalModel.CreateColumnMapping(growHubDbIdColumn0, settingDb.FindProperty("GrowHubDbId")!, settingsTableMapping);
            RelationalModel.CreateColumnMapping(modeColumn, settingDb.FindProperty("Mode")!, settingsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn1, settingDb.FindProperty("Type")!, settingsTableMapping);

            var userDb = FindEntityType("SmartGrowHub.WebApi.Infrastructure.Data.Model.UserDb")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            userDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var smartGrowHubWebApiInfrastructureDataModelUserDbTableBase = new TableBase("SmartGrowHub.WebApi.Infrastructure.Data.Model.UserDb", null, relationalModel);
            var displayNameColumnBase = new ColumnBase<ColumnMappingBase>("DisplayName", "TEXT", smartGrowHubWebApiInfrastructureDataModelUserDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelUserDbTableBase.Columns.Add("DisplayName", displayNameColumnBase);
            var emailAddressColumnBase = new ColumnBase<ColumnMappingBase>("EmailAddress", "TEXT", smartGrowHubWebApiInfrastructureDataModelUserDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelUserDbTableBase.Columns.Add("EmailAddress", emailAddressColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "BLOB", smartGrowHubWebApiInfrastructureDataModelUserDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelUserDbTableBase.Columns.Add("Id", idColumnBase4);
            var passwordColumnBase = new ColumnBase<ColumnMappingBase>("Password", "BLOB", smartGrowHubWebApiInfrastructureDataModelUserDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelUserDbTableBase.Columns.Add("Password", passwordColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "TEXT", smartGrowHubWebApiInfrastructureDataModelUserDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelUserDbTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("SmartGrowHub.WebApi.Infrastructure.Data.Model.UserDb", smartGrowHubWebApiInfrastructureDataModelUserDbTableBase);
            var smartGrowHubWebApiInfrastructureDataModelUserDbMappingBase = new TableMappingBase<ColumnMappingBase>(userDb, smartGrowHubWebApiInfrastructureDataModelUserDbTableBase, true);
            smartGrowHubWebApiInfrastructureDataModelUserDbTableBase.AddTypeMapping(smartGrowHubWebApiInfrastructureDataModelUserDbMappingBase, false);
            defaultTableMappings4.Add(smartGrowHubWebApiInfrastructureDataModelUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, userDb.FindProperty("Id")!, smartGrowHubWebApiInfrastructureDataModelUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayNameColumnBase, userDb.FindProperty("DisplayName")!, smartGrowHubWebApiInfrastructureDataModelUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailAddressColumnBase, userDb.FindProperty("EmailAddress")!, smartGrowHubWebApiInfrastructureDataModelUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase, userDb.FindProperty("Password")!, smartGrowHubWebApiInfrastructureDataModelUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, userDb.FindProperty("UserName")!, smartGrowHubWebApiInfrastructureDataModelUserDbMappingBase);

            var tableMappings4 = new List<TableMapping>();
            userDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var usersTable = new Table("Users", null, relationalModel);
            var idColumn4 = new Column("Id", "BLOB", usersTable);
            usersTable.Columns.Add("Id", idColumn4);
            var displayNameColumn = new Column("DisplayName", "TEXT", usersTable);
            usersTable.Columns.Add("DisplayName", displayNameColumn);
            var emailAddressColumn = new Column("EmailAddress", "TEXT", usersTable);
            usersTable.Columns.Add("EmailAddress", emailAddressColumn);
            var passwordColumn = new Column("Password", "BLOB", usersTable);
            usersTable.Columns.Add("Password", passwordColumn);
            var userNameColumn = new Column("UserName", "TEXT", usersTable);
            usersTable.Columns.Add("UserName", userNameColumn);
            var pK_Users = new UniqueConstraint("PK_Users", usersTable, new[] { idColumn4 });
            usersTable.PrimaryKey = pK_Users;
            var pK_UsersUc = RelationalModel.GetKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.UserDb",
                new[] { "Id" });
            pK_Users.MappedKeys.Add(pK_UsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UsersUc).Add(pK_Users);
            usersTable.UniqueConstraints.Add("PK_Users", pK_Users);
            var iX_Users_EmailAddress = new TableIndex(
            "IX_Users_EmailAddress", usersTable, new[] { emailAddressColumn }, true);
            var iX_Users_EmailAddressIx = RelationalModel.GetIndex(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.UserDb",
                new[] { "EmailAddress" });
            iX_Users_EmailAddress.MappedIndexes.Add(iX_Users_EmailAddressIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Users_EmailAddressIx).Add(iX_Users_EmailAddress);
            usersTable.Indexes.Add("IX_Users_EmailAddress", iX_Users_EmailAddress);
            var iX_Users_UserName = new TableIndex(
            "IX_Users_UserName", usersTable, new[] { userNameColumn }, true);
            var iX_Users_UserNameIx = RelationalModel.GetIndex(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.UserDb",
                new[] { "UserName" });
            iX_Users_UserName.MappedIndexes.Add(iX_Users_UserNameIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Users_UserNameIx).Add(iX_Users_UserName);
            usersTable.Indexes.Add("IX_Users_UserName", iX_Users_UserName);
            relationalModel.Tables.Add(("Users", null), usersTable);
            var usersTableMapping = new TableMapping(userDb, usersTable, true);
            usersTable.AddTypeMapping(usersTableMapping, false);
            tableMappings4.Add(usersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, userDb.FindProperty("Id")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(displayNameColumn, userDb.FindProperty("DisplayName")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(emailAddressColumn, userDb.FindProperty("EmailAddress")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn, userDb.FindProperty("Password")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, userDb.FindProperty("UserName")!, usersTableMapping);

            var userSessionDb = FindEntityType("SmartGrowHub.WebApi.Infrastructure.Data.Model.UserSessionDb")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            userSessionDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase = new TableBase("SmartGrowHub.WebApi.Infrastructure.Data.Model.UserSessionDb", null, relationalModel);
            var accessTokenColumnBase = new ColumnBase<ColumnMappingBase>("AccessToken", "TEXT", smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase.Columns.Add("AccessToken", accessTokenColumnBase);
            var expiresColumnBase = new ColumnBase<ColumnMappingBase>("Expires", "TEXT", smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase.Columns.Add("Expires", expiresColumnBase);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "BLOB", smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase.Columns.Add("Id", idColumnBase5);
            var refreshTokenColumnBase = new ColumnBase<ColumnMappingBase>("RefreshToken", "BLOB", smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase.Columns.Add("RefreshToken", refreshTokenColumnBase);
            var userDbIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserDbId", "BLOB", smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase);
            smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase.Columns.Add("UserDbId", userDbIdColumnBase0);
            relationalModel.DefaultTables.Add("SmartGrowHub.WebApi.Infrastructure.Data.Model.UserSessionDb", smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase);
            var smartGrowHubWebApiInfrastructureDataModelUserSessionDbMappingBase = new TableMappingBase<ColumnMappingBase>(userSessionDb, smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase, true);
            smartGrowHubWebApiInfrastructureDataModelUserSessionDbTableBase.AddTypeMapping(smartGrowHubWebApiInfrastructureDataModelUserSessionDbMappingBase, false);
            defaultTableMappings5.Add(smartGrowHubWebApiInfrastructureDataModelUserSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, userSessionDb.FindProperty("Id")!, smartGrowHubWebApiInfrastructureDataModelUserSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessTokenColumnBase, userSessionDb.FindProperty("AccessToken")!, smartGrowHubWebApiInfrastructureDataModelUserSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiresColumnBase, userSessionDb.FindProperty("Expires")!, smartGrowHubWebApiInfrastructureDataModelUserSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refreshTokenColumnBase, userSessionDb.FindProperty("RefreshToken")!, smartGrowHubWebApiInfrastructureDataModelUserSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userDbIdColumnBase0, userSessionDb.FindProperty("UserDbId")!, smartGrowHubWebApiInfrastructureDataModelUserSessionDbMappingBase);

            var tableMappings5 = new List<TableMapping>();
            userSessionDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var userSessionsTable = new Table("UserSessions", null, relationalModel);
            var idColumn5 = new Column("Id", "BLOB", userSessionsTable);
            userSessionsTable.Columns.Add("Id", idColumn5);
            var accessTokenColumn = new Column("AccessToken", "TEXT", userSessionsTable);
            userSessionsTable.Columns.Add("AccessToken", accessTokenColumn);
            var expiresColumn = new Column("Expires", "TEXT", userSessionsTable);
            userSessionsTable.Columns.Add("Expires", expiresColumn);
            var refreshTokenColumn = new Column("RefreshToken", "BLOB", userSessionsTable);
            userSessionsTable.Columns.Add("RefreshToken", refreshTokenColumn);
            var userDbIdColumn0 = new Column("UserDbId", "BLOB", userSessionsTable);
            userSessionsTable.Columns.Add("UserDbId", userDbIdColumn0);
            var pK_UserSessions = new UniqueConstraint("PK_UserSessions", userSessionsTable, new[] { idColumn5 });
            userSessionsTable.PrimaryKey = pK_UserSessions;
            var pK_UserSessionsUc = RelationalModel.GetKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.UserSessionDb",
                new[] { "Id" });
            pK_UserSessions.MappedKeys.Add(pK_UserSessionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserSessionsUc).Add(pK_UserSessions);
            userSessionsTable.UniqueConstraints.Add("PK_UserSessions", pK_UserSessions);
            var iX_UserSessions_RefreshToken = new TableIndex(
            "IX_UserSessions_RefreshToken", userSessionsTable, new[] { refreshTokenColumn }, true);
            var iX_UserSessions_RefreshTokenIx = RelationalModel.GetIndex(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.UserSessionDb",
                new[] { "RefreshToken" });
            iX_UserSessions_RefreshToken.MappedIndexes.Add(iX_UserSessions_RefreshTokenIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserSessions_RefreshTokenIx).Add(iX_UserSessions_RefreshToken);
            userSessionsTable.Indexes.Add("IX_UserSessions_RefreshToken", iX_UserSessions_RefreshToken);
            var iX_UserSessions_UserDbId = new TableIndex(
            "IX_UserSessions_UserDbId", userSessionsTable, new[] { userDbIdColumn0 }, false);
            var iX_UserSessions_UserDbIdIx = RelationalModel.GetIndex(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.UserSessionDb",
                new[] { "UserDbId" });
            iX_UserSessions_UserDbId.MappedIndexes.Add(iX_UserSessions_UserDbIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserSessions_UserDbIdIx).Add(iX_UserSessions_UserDbId);
            userSessionsTable.Indexes.Add("IX_UserSessions_UserDbId", iX_UserSessions_UserDbId);
            relationalModel.Tables.Add(("UserSessions", null), userSessionsTable);
            var userSessionsTableMapping = new TableMapping(userSessionDb, userSessionsTable, true);
            userSessionsTable.AddTypeMapping(userSessionsTableMapping, false);
            tableMappings5.Add(userSessionsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, userSessionDb.FindProperty("Id")!, userSessionsTableMapping);
            RelationalModel.CreateColumnMapping(accessTokenColumn, userSessionDb.FindProperty("AccessToken")!, userSessionsTableMapping);
            RelationalModel.CreateColumnMapping(expiresColumn, userSessionDb.FindProperty("Expires")!, userSessionsTableMapping);
            RelationalModel.CreateColumnMapping(refreshTokenColumn, userSessionDb.FindProperty("RefreshToken")!, userSessionsTableMapping);
            RelationalModel.CreateColumnMapping(userDbIdColumn0, userSessionDb.FindProperty("UserDbId")!, userSessionsTableMapping);
            var fK_Components_Settings_SettingDbId = new ForeignKeyConstraint(
                "FK_Components_Settings_SettingDbId", componentsTable, settingsTable,
                new[] { settingDbIdColumn },
                settingsTable.FindUniqueConstraint("PK_Settings")!, ReferentialAction.Cascade);
            var fK_Components_Settings_SettingDbIdFk = RelationalModel.GetForeignKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.ComponentDb",
                new[] { "SettingDbId" },
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.SettingDb",
                new[] { "Id" });
            fK_Components_Settings_SettingDbId.MappedForeignKeys.Add(fK_Components_Settings_SettingDbIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Components_Settings_SettingDbIdFk).Add(fK_Components_Settings_SettingDbId);
            componentsTable.ForeignKeyConstraints.Add(fK_Components_Settings_SettingDbId);
            settingsTable.ReferencingForeignKeyConstraints.Add(fK_Components_Settings_SettingDbId);
            var fK_GrowHubs_Plants_PlantId = new ForeignKeyConstraint(
                "FK_GrowHubs_Plants_PlantId", growHubsTable, plantsTable,
                new[] { plantIdColumn },
                plantsTable.FindUniqueConstraint("PK_Plants")!, ReferentialAction.NoAction);
            var fK_GrowHubs_Plants_PlantIdFk = RelationalModel.GetForeignKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.GrowHubDb",
                new[] { "PlantId" },
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.PlantDb",
                new[] { "Id" });
            fK_GrowHubs_Plants_PlantId.MappedForeignKeys.Add(fK_GrowHubs_Plants_PlantIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GrowHubs_Plants_PlantIdFk).Add(fK_GrowHubs_Plants_PlantId);
            growHubsTable.ForeignKeyConstraints.Add(fK_GrowHubs_Plants_PlantId);
            plantsTable.ReferencingForeignKeyConstraints.Add(fK_GrowHubs_Plants_PlantId);
            var fK_GrowHubs_Users_UserDbId = new ForeignKeyConstraint(
                "FK_GrowHubs_Users_UserDbId", growHubsTable, usersTable,
                new[] { userDbIdColumn },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Cascade);
            var fK_GrowHubs_Users_UserDbIdFk = RelationalModel.GetForeignKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.GrowHubDb",
                new[] { "UserDbId" },
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.UserDb",
                new[] { "Id" });
            fK_GrowHubs_Users_UserDbId.MappedForeignKeys.Add(fK_GrowHubs_Users_UserDbIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GrowHubs_Users_UserDbIdFk).Add(fK_GrowHubs_Users_UserDbId);
            growHubsTable.ForeignKeyConstraints.Add(fK_GrowHubs_Users_UserDbId);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_GrowHubs_Users_UserDbId);
            var fK_SensorReading_GrowHubs_GrowHubDbId = new ForeignKeyConstraint(
                "FK_SensorReading_GrowHubs_GrowHubDbId", sensorReadingTable, growHubsTable,
                new[] { growHubDbIdColumn },
                growHubsTable.FindUniqueConstraint("PK_GrowHubs")!, ReferentialAction.Cascade);
            var fK_SensorReading_GrowHubs_GrowHubDbIdFk = RelationalModel.GetForeignKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.SensorReadingDb",
                new[] { "GrowHubDbId" },
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.GrowHubDb",
                new[] { "Id" });
            fK_SensorReading_GrowHubs_GrowHubDbId.MappedForeignKeys.Add(fK_SensorReading_GrowHubs_GrowHubDbIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_SensorReading_GrowHubs_GrowHubDbIdFk).Add(fK_SensorReading_GrowHubs_GrowHubDbId);
            sensorReadingTable.ForeignKeyConstraints.Add(fK_SensorReading_GrowHubs_GrowHubDbId);
            growHubsTable.ReferencingForeignKeyConstraints.Add(fK_SensorReading_GrowHubs_GrowHubDbId);
            var fK_Settings_GrowHubs_GrowHubDbId = new ForeignKeyConstraint(
                "FK_Settings_GrowHubs_GrowHubDbId", settingsTable, growHubsTable,
                new[] { growHubDbIdColumn0 },
                growHubsTable.FindUniqueConstraint("PK_GrowHubs")!, ReferentialAction.Cascade);
            var fK_Settings_GrowHubs_GrowHubDbIdFk = RelationalModel.GetForeignKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.SettingDb",
                new[] { "GrowHubDbId" },
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.GrowHubDb",
                new[] { "Id" });
            fK_Settings_GrowHubs_GrowHubDbId.MappedForeignKeys.Add(fK_Settings_GrowHubs_GrowHubDbIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Settings_GrowHubs_GrowHubDbIdFk).Add(fK_Settings_GrowHubs_GrowHubDbId);
            settingsTable.ForeignKeyConstraints.Add(fK_Settings_GrowHubs_GrowHubDbId);
            growHubsTable.ReferencingForeignKeyConstraints.Add(fK_Settings_GrowHubs_GrowHubDbId);
            var fK_UserSessions_Users_UserDbId = new ForeignKeyConstraint(
                "FK_UserSessions_Users_UserDbId", userSessionsTable, usersTable,
                new[] { userDbIdColumn0 },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Cascade);
            var fK_UserSessions_Users_UserDbIdFk = RelationalModel.GetForeignKey(this,
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.UserSessionDb",
                new[] { "UserDbId" },
                "SmartGrowHub.WebApi.Infrastructure.Data.Model.UserDb",
                new[] { "Id" });
            fK_UserSessions_Users_UserDbId.MappedForeignKeys.Add(fK_UserSessions_Users_UserDbIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserSessions_Users_UserDbIdFk).Add(fK_UserSessions_Users_UserDbId);
            userSessionsTable.ForeignKeyConstraints.Add(fK_UserSessions_Users_UserDbId);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_UserSessions_Users_UserDbId);
            return relationalModel.MakeReadOnly();
        }
    }
}
